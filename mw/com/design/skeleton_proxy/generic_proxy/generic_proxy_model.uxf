<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>Note
--
Association of Error class is deliberately not shown
as it is used in multiple classes to handle
error cases</help_text>
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>175</x>
      <y>35</y>
      <w>329</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>bmw::mw::com::impl::HandleType
--
-indentifier_: InstanceIdentifier
--
+operator==(const HandleType&amp; other): bool
+operator&lt;(const HandleType&amp; other): bool
+GetInstanceId(): InstanceIdentifier&amp;
+GetDeploymentInformation(): ServiceInstanceDeployment&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>707</x>
      <y>259</y>
      <w>469</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>ProxyBindingFactory
--
_+Create(HandleType handle): std::unique_ptr&lt;ProxyBinding&gt;_
_+CreateGeneric(HandleType handle, ServiceElementMap&lt;GenericProxyEvent&gt;&amp; events): _
_     std::unique_ptr&lt;ProxyBinding&gt;_
_+FindService(InstanceIdentifier) : std::optional&lt;HandleType&gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>126</x>
      <y>154</y>
      <w>399</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>/bmw::mw::com::impl::ProxyBase/
--
-proxy_binding_ : std::unique_ptr&lt;ProxyBinding&gt;
-handle_ : HandleType
--
using HandleType = bmw::mw::com::impl::HandleType

_+FindService(InstanceSpecifier): ServiceHandleContainer&lt;HandleType&gt;_
_+Preconstruct(const HandleType&amp;): Result&lt;ConstructionToken&gt;_
+GetHandle() : const HandleType&amp;
--
Note: ProxyBase is not copyable but moveable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1197</x>
      <y>203</y>
      <w>182</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>/ProxyBinding/
--
/+IsEventProvided() = 0: bool/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>294</x>
      <y>112</y>
      <w>42</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>658</x>
      <y>280</y>
      <w>63</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>70.0;20.0;10.0;20.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1169</x>
      <y>238</y>
      <w>112</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>90.0;10.0;90.0;80.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>399</x>
      <y>343</y>
      <w>322</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>mw::com::impl::GenericProxy
bg=yellow
--
using HandleType = ProxyBase::HandleType
using EventMap = ServiceElementMap&lt;GenericProxyEvent&gt;

+GenericProxy(ConstructionToken&amp;&amp;)
+GenericProxy(HandleType)

+events_ : EventMap


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1078</x>
      <y>371</y>
      <w>406</w>
      <h>189</h>
    </coordinates>
    <panel_attributes>lola::Proxy
--
_+Create(const LolaServiceInstanceDeployment&amp; shm_binding,_
_        const LolaServiceTypeDeployment&amp; service_deployment,_
_        QualityType quality_type) : Result&lt;Proxy&gt;_
_+Create(const LolaServiceInstanceDeployment&amp; shm_binding,_
_        const LolaServiceTypeDeployment&amp; service_deployment,_
_        QualityType quality_type,_
_        ServiceElementMap&lt;GenericProxyEvent&gt;&amp;) : Result&lt;Proxy&gt;_
+Proxy(Proxy&amp;&amp;)
+GetServiceHandles(instance_identifier : InstanceIdentifier) : bmw::Result&lt;std::vector&lt;HandleType&gt;&gt;
+GetEventDataControl(element_fq_id : const ElementFqId) : EventDataControl* 
+GetRawDataStorage(element_fq_id : const ElementFqId) : void*
+GetEventMetaInfo(element_fq_id : const ElementFqId) :  const EventMetaInfo&amp;
+GetQualityType() : QualityType
+GetSourcePid() : pid_t
/+IsEventProvided(): bool/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>700</y>
      <w>441</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>template=SampleType
mw::com::impl::ProxyEvent
--

template &lt;typename F&gt;
+GetNewSamples(F&amp;&amp; receiver, size_t max_num_samples): Result&lt;size_t&gt;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>938</x>
      <y>581</y>
      <w>413</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>/ProxyEventBindingBase/
--
/+Subscribe(size_t maxSampleCount) = 0: void/
/+GetSubscriptionState() = 0: SubscriptionState/
/+Unsubscribe() = 0: void/
/+SetReceiveHandler(EventReceiveHandler handler) = 0: void/
/+UnsetReceiveHandler() = 0: void/
/+GetNumNewSamplesAvailable() = 0: Result&lt;std::size_t&gt;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>938</x>
      <y>707</y>
      <w>420</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>template=SampleType
/ProxyEventBinding/
--
using Callback = amp::callback&lt;void(SamplePtr&lt;SampleType&gt;) noexcept&gt;

/+GetNewSamples(Callback&amp;&amp;, TrackerGuardFactory&amp;) = 0: Result&lt;size_t&gt;/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>455</x>
      <y>525</y>
      <w>294</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>SampleReferenceTracker
--
+SampleReferenceTracker()
+SampleReferenceTracker(size_t max_num_samples)
+GetNumAvailableSamples(): size_t
+Allocate(size_t count) : TrackerGuardFactory
+Reset(size_t new_max_count) : void
+IsUsed() : bool </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>924</x>
      <y>931</y>
      <w>511</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::ProxyEvent
--
+ProxyEvent(lola::Proxy&amp; parent)
+GetNewSamples(ProxyEventBinding::Callback&amp;&amp;, TrackerGuardFactory&amp;): Result&lt;size_t&gt;
--
-common_dispatch_ : lola::ProxyEventCommon
--
Notes:
Dispatches all calls to functions in ProxyEventBindingBase interface to ProxyEventCommon</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>28</x>
      <y>945</y>
      <w>651</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>ProxyEventBindingFactory
--
_ template &lt;typename SampleType&gt;_
_+Create(ProxyBase&amp; parent, amp::string_view event_name): std::unique_ptr&lt;ProxyEventBinding&lt;SampleType&gt; &gt;_
*_+CreateGeneric(ProxyBase&amp; parent, amp::string_view event_name): std::unique_ptr&lt;GenericProxyEventBinding &gt;_*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1358</x>
      <y>1344</y>
      <w>322</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lola::SubscriptionStateMachine
--
Note.
State machine that manages subscriptions to a ProxyEvent.
Details about the state machine can be found in
proxy_event_state_machine.uxf.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>28</x>
      <y>1057</y>
      <w>378</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>ProxyBaseView
--
--
+ProxyBaseView(proxy_base : ProxyBase&amp;)
+GetImpl() : ProxyBinding&amp;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>903</x>
      <y>1428</y>
      <w>714</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>lola::SlotCollector
--
+using SlotIndexVector = std::vector&lt;EventDataControl::SlotIndexType&gt;;

--
-event_data_control_: EventDataControl&amp;
--
-SlotCollector(EventDataControl&amp;, const std::size_t max_slots)
+GetNumNewSamplesAvailable(): size_t
+GetNewSamplesSlotIndices(size_t max_count): 
 pair&lt;SlotIndexVector::const_reverse_iterator, SlotIndexVector::const_reverse_iterator&gt;
--
Notes:
SlotCollector is not copyable.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>518</x>
      <y>203</y>
      <w>693</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;970.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>203</x>
      <y>301</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>70</x>
      <y>455</y>
      <w>42</w>
      <h>266</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;360.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>343</x>
      <y>728</y>
      <w>609</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;190.0;760.0;190.0;760.0;10.0;850.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>406</x>
      <y>546</y>
      <w>63</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>742</x>
      <y>546</y>
      <w>238</w>
      <h>406</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;510.0;320.0;510.0;320.0;560.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>602</x>
      <y>770</y>
      <w>350</w>
      <h>189</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>480.0;10.0;430.0;10.0;430.0;250.0;10.0;250.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>21</x>
      <y>812</y>
      <w>42</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;190.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1512</x>
      <y>1316</y>
      <w>21</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>224</x>
      <y>994</y>
      <w>21</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1477</x>
      <y>413</y>
      <w>504</w>
      <h>770</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=1</panel_attributes>
    <additional_attributes>170.0;1080.0;700.0;1080.0;700.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1267</x>
      <y>238</y>
      <w>21</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1120</x>
      <y>798</y>
      <w>21</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1148</x>
      <y>679</y>
      <w>21</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>35</x>
      <y>343</y>
      <w>350</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>DummyProxy
{{generated}}
--
using HandleType = ProxyBase::HandleType

+DummyProxy(ConstructionToken&amp;&amp;)
+DummyProxy(HandleType)

// using events::DummyEvent = ProxyEvent&lt;SampleType&gt;
+DummyEvent : events::DummyEvent


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>448</x>
      <y>301</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>714</x>
      <y>392</y>
      <w>126</w>
      <h>427</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0;160.0;580.0;90.0;580.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>119</x>
      <y>525</y>
      <w>294</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>/mw::com::impl::ProxyEventBase/
bg=yellow
--
+ProxyEventBase(ProxyEventBindingBase&amp;)

+Subscribe(size_t max_sample_count): void
+GetSubscriptionState() : SubscriptionState
+Unsubscribe(): void
+GetFreeSampleCount(): Result&lt;size_t&gt;
+GetNumNewSamplesAvailable(): Result&lt;std::size_t&gt;
+SetReceiveHandler(EventReceiveHandler handler) : void
+UnsetReceiveHandler() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>175</x>
      <y>644</y>
      <w>21</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>406</x>
      <y>644</y>
      <w>182</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;240.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>441</x>
      <y>707</y>
      <w>336</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>mw::com::impl::GenericProxyEvent
bg=yellow
--
+GetSampleSize() const : std::size_t
+HasSerializedFormat() const : bool

template &lt;typename F&gt;
+GetNewSamples(F&amp;&amp; receiver, size_t max_num_samples): Result&lt;size_t&gt;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1372</x>
      <y>714</y>
      <w>406</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>/GenericProxyEventBinding/
bg=yellow
--
using Callback = amp::callback&lt;void(SamplePtr&lt;void&gt;) noexcept&gt;

+GetSampleSize() const : std::size_t
+HasSerializedFormat() const : bool

/+GetNewSamples(Callback&amp;&amp;, size_t max_num_samples) = 0: Result&lt;size_t&gt;/

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1344</x>
      <y>630</y>
      <w>140</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;10.0;180.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1113</x>
      <y>1078</y>
      <w>483</w>
      <h>245</h>
    </coordinates>
    <panel_attributes>lola::ProxyEventCommon
bg=yellow
--
-element_fq_id_: ElementFqId
-parent_: lola::Proxy&amp;
-subscription_event_state_machine_: std::shared_ptr&lt;SubscriptionStateMachine&gt;
-slot_collector_: amp::optional&lt;SlotCollector&gt;
--
+ProxyEventCommon(lola::Proxy&amp; parent, ElementFqId)
+Subscribe(size_t max_sample_count): void
+Unsubscribe(): void
+GetSubscriptionState() : SubscriptionState
+SetReceiveHandler(EventReceiveHandler handler) : void
+UnsetReceiveHandler(EventReceiveHandler handler) : void
+GetEventSourcePid() : pid_t 
+GetElementFQId() : ElementFqId
+GetNumNewSamplesAvailable(): Result&lt;std::size_t&gt;
+GetNewSamplesSlotIndices(size_t max_count): 
 pair&lt;SlotIndexVector::const_reverse_iterator, SlotIndexVector::const_reverse_iterator&gt;
--
Notes:
lola::ProxyEventCommon is not moveable or copyable.
SlotCollector is instantiated by the SubscriptionStateMachine when it enters the 
Subscribed state. It is cleared if it subsequently leaves the Subscribed state.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1449</x>
      <y>938</y>
      <w>504</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lola::GenericProxyEvent
bg=yellow
--
+GenericProxyEvent(lola::Proxy&amp; parent)
+GetNewSamples(GenericProxyEventBinding::Callback&amp;&amp;, TrackerGuardFactory&amp;): Result&lt;size_t&gt;
--
-common_dispatch_ : lola::ProxyEventCommon</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1631</x>
      <y>812</y>
      <w>21</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>742</x>
      <y>546</y>
      <w>840</w>
      <h>406</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;510.0;1180.0;510.0;1180.0;560.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>735</x>
      <y>805</y>
      <w>651</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1</panel_attributes>
    <additional_attributes>10.0;20.0;10.0;100.0;220.0;100.0;220.0;10.0;910.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1197</x>
      <y>1022</y>
      <w>112</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
r1=common_dispatch_</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1498</x>
      <y>994</y>
      <w>112</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
r1=common_dispatch_</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>658</x>
      <y>14</y>
      <w>392</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>ServiceElementMap
--
using key_type = amp::stringview
using mapped_type = GenericProxyEvent
using value_type = 	std::pair&lt;const key_type, mapped_type&gt;
using const_iterator = LegacyBidirectionalIterator to const value_type

+cbegin() : const_iterator 
+cend() : const_iterator 
+find() : const_iterator
+size() : std::size_t
+empty() : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>602</x>
      <y>56</y>
      <w>70</w>
      <h>301</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;410.0;10.0;10.0;80.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1162</x>
      <y>1316</y>
      <w>91</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
r1=slot_collector_</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>350</x>
      <y>287</y>
      <w>371</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>510.0;10.0;450.0;10.0;450.0;50.0;10.0;50.0;10.0;80.0</additional_attributes>
  </element>
</diagram>
