<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>1100</y>
      <w>740</w>
      <h>390</h>
    </coordinates>
    <panel_attributes>lola::TransactionLog
--
bg=yellow
TransactionLog(SlotIndex size, size_t subscribed_sample_count)

+SubscribeTransactionBegin(std::size_t subscription_max_sample_count) : void
+SubscribeTransactionCommit() : void
+SubscribeTransactionAbort() : void

+UnsubscribeTransactionBegin() : void
+UnsubscribeTransactionCommit() : void
+ReferenceTransactionBegin(SlotIndexType slot_index) : void
+ReferenceTransactionCommit(SlotIndexType slot_index) : void
+ReferenceTransactionAbort(SlotIndexType slot_index) : void
+DereferenceTransactionBegin(SlotIndexType slot_index) : void
+DereferenceTransactionCommit(SlotIndexType slot_index) : void


+RollbackProxyElementLog(const DereferenceSlotCallback&amp;, const UnsubscribeCallback&amp;) : ResultBlank
+RollbackSkeletonTracingElementLog(const DereferenceSlotCallback&amp;) : ResultBlank
+ContainsTransactions() const : bool

--
-reference_count_slots_ : TransactionLogSlots
-subscribe_transactions_ : TransactionLogSlot
-subscription_max_sample_count_ : amp::optional&lt;MaxSampleCountType&gt;



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>190</x>
      <y>470</y>
      <w>1100</w>
      <h>400</h>
    </coordinates>
    <panel_attributes>lola::TransactionLogSet
--
bg=yellow
{innerclass
TransactionLogNode
--
-is_active_ : bool
-needs_rollback : bool
-transaction_log_ : lola::TransactionLog
-transaction_log_id_: TransactionLogId
innerclass}

using TransactionLogIndex = LolaEventInstanceDeployment::SubscriberCountType;
using TransactionLogCollection = std::vector&lt;TransactionLogNode, memory::shared::PolymorphicOffsetPtrAllocator&lt;TransactionLogNode&gt;&gt;;
        
TransactionLogSet(TransactionLogIndex max_number_of_logs, memory::shared::MemoryResourceProxy* proxy)

+RollbackProxyTransactions(const TransactionLogId&amp;, TransactionLog::DereferenceSlotCallback,TransactionLog::UnsubscribeCallback) : ResultBlank 
+RollbackSkeletonTracingTransactions(TransactionLog::DereferenceSlotCallback) : ResultBlank
+RegisterProxyElement(const TransactionLogId&amp;) : TransactionLogIndex
+RegisterSkeletonTracingElement() : TransactionLogIndex
+Unregister(TransactionLogIndex) : void
+GetTransactionLog(TransactionLogIndex) : TransactionLog&amp; 
+MarkTransactionLogsNeedRollback(const TransactionLogId&amp; ) : void;

--
-proxy_transaction_logs_ : TransactionLogCollection
-skeleton_tracing_transaction_log_ : TransactionLogNode




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>960</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>&lt;&lt;SharedMemory&gt;&gt;
lola::EventDataControlImpl
--
SlotIndexType uint16_t
--
-state_slots: std::vector&lt;std::atomic&lt;EventSlotStatusType::value_type&gt;,
        PolymorphicOffsetAllocator&lt;std::atomic&lt;EventSlotStatusType::value_type&gt; &gt; &gt;
--
+EventDataControlImpl(MemoryResourceProxy*, SlotIndexType maxSlots)
+AllocateNextSlot(): std::optional&lt;SlotIndexType&gt;
+EventReady(SlotIndexType, EventTimestamp): void
+Discard(SlotIndexType): void
+ReferenceNextEvent(lastSearchTime : EventTimestampType,
    upper_limit : const EventSlotStatus::EventTimeStamp = EventSlotStatus::TIMESTAMP_MAX): std::optional&lt;SlotIndexType&gt;
+DereferenceEvent(SlotIndexType eventSlotIndex): void
+GetNumNewEvents(reference_time : const EventSlotStatus::EventTimeStamp) const : std::size_t 
*+GetTransactionLogSet() : TransactionLogSet&amp;*
--

*-transaction_log_set_ : TransactionLogSet*
--
Note:
Exists at least once per provided Event.
For an ASIL-B provider/skeleton, which has ASIL-B AND ASIL-QM consumer/subscriber,
it exists twice: One Control section per ASIL-level in seperated shm-objects.
Readable/Writable by Skeleton and Proxies</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1010</x>
      <y>380</y>
      <w>380</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lola::TransactionLogID
--
bg=yellow
+ uid_ : uid_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>860</y>
      <w>200</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n
proxy_transaction_logs_</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>360</y>
      <w>40</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>710</x>
      <y>920</y>
      <w>340</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>For each potential subscriber of the Event a
TransactionLog is pre-allocated (i.e. the
number correlates with max_subscribers
from configuration)

A transaction log for the skeleton/provider side
gets allocated for IPC Tracing, which technically
acts like a provider/skeleton side proxy.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>940</x>
      <y>1240</y>
      <w>380</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lola::TransactionLogSlot
--
bg=yellow

+SetTransactionBegin(bool new_value) : void
+SetTransactionEnd(bool new_value) : void

+GetTransactionBegin() const : bool
+GetTransactionEnd() const : bool

--
-transaction_begin_ : std::uint8_t : 1;
-transaction_end_ :  std::uint8_t  : 2;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>770</x>
      <y>1270</y>
      <w>190</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>230</x>
      <y>860</y>
      <w>270</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..1
skeleton_tracing_transaction_log_</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;240.0</additional_attributes>
  </element>
</diagram>
