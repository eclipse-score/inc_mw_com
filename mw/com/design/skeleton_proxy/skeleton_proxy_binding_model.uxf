<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1790</x>
      <y>830</y>
      <w>720</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>/DummySkeleton/
{{generated}}
--
_+Create(InstanceSpecifier, MethodCallProcessingMode) : Result&lt;DummySkeleton&gt;_
_+Create(InstanceIdentifier, MethodCallProcessingMode) : Result&lt;DummySkeleton&gt;_

-DummySkeleton(InstanceIdentifier&amp;, MethodCallProcessingMode)

DummyEvent : events::DummyEvent // using events::DummyEvent = SkeletonEvent&lt;SampleType&gt;
DummyField : fields::DummyField // using fields::DummyField = SkeletonField&lt;SampleType&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1790</x>
      <y>1670</y>
      <w>470</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>template=SampleType
/SkeletonEventBinding/
--
/+Send(SampleType const&amp;) = 0: void/
/+Send(SampleAllocateePtr&lt;SampleType&gt;) = 0: void/
/+Allocate() = 0: SampleAllocateePtr&lt;SampleType&gt;/

+ GetMaxSize(): std::size_t

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1790</x>
      <y>1870</y>
      <w>650</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::SkeletonEvent
--
+SkeletonEvent(SkeletonBase&amp; parent, ElementFqId, amp::string_view event_name, 
                size_t max_number_slots, bool enforce_max_samples = true)
+Send(SampleType const&amp;): void
+Send(SampleAllocateePtr&lt;SampleType&gt;): void
+Allocate(): SampleAllocateePtr&lt;SampleType&gt;
+PrepareOffer(): bmw::ResultBlank
+PrepareStopOffer(): void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1790</x>
      <y>1290</y>
      <w>560</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>template=SampleType
bmw::mw::com::impl::SkeletonEvent
--
+SkeletonEvent(SkeletonBase&amp; parent, std::string event_name)
+Send(SampleType const&amp;): void
+Send(SampleAllocateePtr&lt;SampleType&gt;): void
+Allocate(): SampleAllocateePtr&lt;SampleType&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2390</x>
      <y>730</y>
      <w>350</w>
      <h>470</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>250.0;10.0;330.0;10.0;330.0;440.0;10.0;440.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>650</x>
      <y>540</y>
      <w>830</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/SkeletonBinding/
--
using SkeletonEventBindings = std::unordered_map&lt;amp::string_view, SkeletonEventBindingBase&amp;&gt;
using SkeletonFieldBindings = std::unordered_map&lt;amp::string_view, std::tuple&lt;SkeletonEventBindingBase&amp;,
SkeletonServiceMethodBinding, SkeletonServiceMethodBinding&gt;&gt;

/+PrepareOffer(SkeletonEventBindings&amp;, SkeletonFieldBindings&amp;) = 0: ResultBlank/
/+PrepareStopOffer() = 0: void/
--
Notes:
SkeletonBinding is not moveable or copyable.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1470</x>
      <y>650</y>
      <w>340</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1
m1=1</panel_attributes>
    <additional_attributes>320.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>650</x>
      <y>810</y>
      <w>890</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lola::Skeleton
--
Skeleton(InstanceIdentifier, SkeletonEvents&amp;
+PrepareOffer(SkeletonBinding::SkeletonEventBindings&amp;, SkeletonBinding::SkeletonFieldBindings&amp;): ResultBlank
+PrepareStopOffer(): void

 template &lt;typename SampleType&gt;
+Register(ElementFqId, size_t num_slots): std::pair&lt;EventDataStorage&lt;SampleType&gt;*, 
                                                                                EventDataControlComposite&gt;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>400</y>
      <w>730</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>SkeletonBindingFactory
--
--
_+Create(InstanceIdentifierView instanceId, SkeletonEvents&amp;): std::unique_ptr&lt;SkeletonBinding&gt;_
_+InjectMockBinding(SkeletonBinding* mock_skeleton_binding):void_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1230</x>
      <y>710</y>
      <w>30</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1240</x>
      <y>490</y>
      <w>80</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1790</x>
      <y>530</y>
      <w>850</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>/bmw::mw::com::impl::SkeletonBase/
--
#binding_ : std::unique_ptr&lt;SkeletonBinding&gt;
#events_: SkeletonEvents
#fields_: SkeletonFields
#instance_id_: InstanceIdentifier
--
using SkeletonEvents = std::unordered_map&lt;amp::string_view, SkeletonEventBase&amp;&gt;
+SkeletonBase(std::unique_ptr&lt;SkeletonBinding&gt;, InstanceIdentifier, MethodCallProcessingMode)
+OfferService(): void
+StopOfferService(): void
--
Notes:
SkeletonBase is moveable but not copyable. On moving, the SkeletonBase should call UpdateSkeletonReference on all
events and fields within its events_ and fields_ maps.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2150</x>
      <y>750</y>
      <w>30</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>1730</y>
      <w>860</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>template=SampleType
SkeletonEventBindingFactory
--
_+Create(InstanceIdentifier, SkeletonBase&amp; parent, std::string event_name): SkeletonEventBinding_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1580</x>
      <y>490</y>
      <w>230</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0;210.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3240</x>
      <y>750</y>
      <w>760</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>DummyProxy
{{generated}}
--
using DummyProxy::HandleType = HandleType

+DummyProxy(const HandleType &amp;handle)

+DummyEvent : events::DummyEvent // using events::DummyEvent = ProxyEvent&lt;SampleType&gt;
+DummyFields : fields::Dummyfields // using fields::DummyField = ProxyFields&lt;SampleType&gt;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3240</x>
      <y>1190</y>
      <w>720</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>template=SampleType
bmw::mw::com::impl::ProxyEvent
--
+ProxyEvent(ProxyBase&amp; base, const amp::string_view event_name)

template &lt;typename F&gt;
+GetNewSamples(F&amp;&amp; receiver, size_t max_num_samples): Result&lt;size_t&gt;

--
-GetTypedEventBinding() : ProxyEventBinding&lt;SampleType&gt;*

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3240</x>
      <y>470</y>
      <w>950</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>/bmw::mw::com::impl::ProxyBase/
--
-proxy_binding_ : std::unique_ptr&lt;ProxyBinding&gt;
-handle_ : HandleType
--
using HandleType = bmw::mw::com::impl::HandleType

+ProxyBase(std::unique_ptr&lt;ProxyBinding&gt;, HandleType);
_+FindService(InstanceSpecifier): Result&lt;ServiceHandleContainer&lt;HandleType&gt;&gt;_
_+FindService(InstanceIdentifier): Result&lt;ServiceHandleContainer&lt;HandleType&gt;&gt;_
_+StartFindService(FindServiceHandler&lt;HandleType&gt;, InstanceSpecifier): Result&lt;FindServiceHandle&gt;_
_+StartFindService(FindServiceHandler&lt;HandleType&gt;, InstanceIdentifier): Result&lt;FindServiceHandle&gt;_
_+StopFindService(FindServiceHandle): ResultBlank_

+GetHandle() : const HandleType&amp;
--
Note: ProxyBase is not copyable but moveable</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3310</x>
      <y>320</y>
      <w>470</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>bmw::mw::com::impl::HandleType
--
-indentifier_: InstanceIdentifier
--
+operator==(const HandleType&amp; other): bool
+operator&lt;(const HandleType&amp; other): bool
+GetInstanceId(): InstanceIdentifier&amp;
+GetDeploymentInformation(): ServiceInstanceDeployment&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3890</x>
      <y>890</y>
      <w>60</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;300.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3970</x>
      <y>1360</y>
      <w>640</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>template=SampleType
/ProxyEventBinding/
--
using Callback = amp::callback&lt;void(SamplePtr&lt;SampleType&gt;) noexcept&gt;

/+GetNewSamples(Callback&amp;&amp;, TrackerGuardFactory&amp;) = 0: Result&lt;size_t&gt;/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4000</x>
      <y>1520</y>
      <w>640</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::ProxyEvent
--
+ProxyEvent(lola::Proxy&amp; parent)
+GetNewSamples(Callback&amp;&amp;, TrackerGuardFactory&amp;): Result&lt;size_t&gt;
--
-common_dispatch_ : lola::ProxyEventCommon
--
Notes:
Dispatches all calls to functions in ProxyEventBindingBase interface to 
ProxyEventCommon</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4220</x>
      <y>1460</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3860</x>
      <y>1090</y>
      <w>150</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0;130.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3120</x>
      <y>2530</y>
      <w>840</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>ProxyEventBindingFactory
--
_ template &lt;typename SampleType&gt;_
_+Create(ProxyBase&amp; parent, amp::string_view event_name): std::unique_ptr&lt;ProxyEventBinding&lt;SampleType&gt; &gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3940</x>
      <y>1460</y>
      <w>70</w>
      <h>1090</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>50.0;10.0;50.0;60.0;10.0;60.0;10.0;1070.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3350</x>
      <y>720</y>
      <w>30</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4340</x>
      <y>670</y>
      <w>260</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>/ProxyBinding/
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2200</x>
      <y>1450</y>
      <w>210</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;300.0;160.0;300.0;160.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3880</x>
      <y>1360</y>
      <w>70</w>
      <h>1190</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>50.0;1170.0;50.0;120.0;10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4020</x>
      <y>1000</y>
      <w>580</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lola::Proxy
--
_+Create(const LolaServiceInstanceDeployment&amp; shm_binding,_
_        const LolaServiceTypeDeployment&amp; service_deployment,_
_        QualityType quality_type) : Result&lt;Proxy&gt;_
+Proxy(Proxy&amp;&amp;)
+GetServiceHandles(instance_identifier : InstanceIdentifier) : bmw::Result&lt;std::vector&lt;HandleType&gt;&gt;
+GetEventDataControl(element_fq_id : const ElementFqId) : EventDataControl* 
+GetRawDataStorage(element_fq_id : const ElementFqId) : void*
+GetQualityType() : QualityType
+GetSourcePid() : pid_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4460</x>
      <y>720</y>
      <w>30</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;280.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4090</x>
      <y>340</y>
      <w>460</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>ProxyBindingFactory
--
_+Create(HandleType handle): std::unique_ptr&lt;ProxyBinding&gt;_
_+FindService(InstanceIdentifier) : std::optional&lt;HandleType&gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4400</x>
      <y>420</y>
      <w>80</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>10.0;250.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4120</x>
      <y>420</y>
      <w>60</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>290</x>
      <y>2980</y>
      <w>370</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>bmw::memory::shared::SharedMemoryFactory()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>900</y>
      <w>670</w>
      <h>2120</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses for shared_mem_object creation</panel_attributes>
    <additional_attributes>290.0;2100.0;10.0;2100.0;10.0;10.0;650.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>650</x>
      <y>1060</y>
      <w>4840</w>
      <h>1950</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses for openening
shared_mem_objects</panel_attributes>
    <additional_attributes>10.0;1930.0;4670.0;1920.0;4670.0;10.0;3950.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4180</x>
      <y>670</y>
      <w>180</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3970</x>
      <y>1190</y>
      <w>590</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>/ProxyEventBindingBase/
--
/+Subscribe(size_t maxSampleCount) = 0: void/
/+GetSubscriptionState() = 0: SubscriptionState/
/+Unsubscribe() = 0: void/
/+SetReceiveHandler(EventReceiveHandler handler) = 0: void/
/+UnsetReceiveHandler() = 0: void/
/+GetNumNewSamplesAvailable(): Result&lt;std::size_t&gt;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4220</x>
      <y>1330</y>
      <w>30</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4400</x>
      <y>2120</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4590</x>
      <y>1070</y>
      <w>60</w>
      <h>710</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>40.0;690.0;40.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3320</x>
      <y>2130</y>
      <w>420</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>SampleReferenceTracker
--
+SampleReferenceTracker()
+SampleReferenceTracker(size_t max_num_samples)
+GetNumAvailableSamples(): size_t
+Allocate(size_t count) : TrackerGuardFactory
+Reset(size_t new_max_count) : void
+IsUsed() : bool </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3190</x>
      <y>1360</y>
      <w>150</w>
      <h>860</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0;10.0;840.0;130.0;840.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3420</x>
      <y>2320</y>
      <w>450</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>TrackerGuardFactory
--
-tracker_: SampleReferenceTracker&amp;
--
+GetNumAvailableGuards() : std::size_t
+TakeGuard() : amp::optional&lt;SampleReferenceGuard&gt;
--
-TrackerGuardFactory(SampleReferenceTracker&amp;, std::size_t)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3330</x>
      <y>2260</y>
      <w>30</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3150</x>
      <y>2340</y>
      <w>260</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>SampleReferenceGuard
--
-tracker_: SampleReferenceTracker*
--
Notes:
SampleReferenceGuard is 
not movable or copyable.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3680</x>
      <y>2260</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3730</x>
      <y>2240</y>
      <w>130</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>40.0;80.0;40.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3250</x>
      <y>2450</y>
      <w>350</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0;330.0;30.0;330.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1920</x>
      <y>2330</y>
      <w>760</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>template=SampleType
SamplePtr
--
using pointer = const SampleType*
binding_sample_ptr_: amp::variant&lt;amp::blank, 
    lola::SamplePtr&lt;SampleType&gt;, mock_binding::SamplePtr&lt;SampleType&gt; &gt;
reference_guard_: SampleReferenceGuard
--
+ SamplePtr(binding_sample_ptr : SamplePtrType&amp;&amp;,reference_guard : SampleReferenceGuard)
+get() : pointer
+Get() : pointer
+Swap( other : SamplePtr&amp;) : void
+Reset(other :SamplePtr) : void
+operator*() : const SampleType&amp;
+operator-&gt;() : pointer
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2500</x>
      <y>1280</y>
      <w>760</w>
      <h>1080</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;1060.0;10.0;690.0;420.0;690.0;420.0;10.0;740.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2620</x>
      <y>2410</y>
      <w>550</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;530.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2390</x>
      <y>750</y>
      <w>330</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
knows</panel_attributes>
    <additional_attributes>10.0;400.0;270.0;400.0;270.0;10.0;250.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1570</x>
      <y>1440</y>
      <w>240</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;300.0;10.0;260.0;180.0;260.0;180.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1980</x>
      <y>1810</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1660</x>
      <y>1760</y>
      <w>150</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>130.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1790</x>
      <y>1530</y>
      <w>470</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>/SkeletonEventBindingBase/
--
/+PrepareOffer() = 0: bmw::ResultBlank/
/+PrepareStopOffer() = 0: void/
/+GetMaxSize() = 0: std::size_t/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3480</x>
      <y>430</y>
      <w>60</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4170</x>
      <y>2180</y>
      <w>460</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lola::SubscriptionStateMachine
--
Note.
State machine that manages subscriptions to a ProxyEvent.
Details about the state machine can be found in
proxy_event_state_machine.uxf.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4010</x>
      <y>2350</y>
      <w>840</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lola::SlotCollector
--
+using SlotIndexVector = std::vector&lt;EventDataControl::SlotIndexType&gt;;

--
-event_data_control_: EventDataControl&amp;
--
-ProxyEventClient(EventDataControl&amp;, const std::size_t max_slots)
+GetNumNewSamplesAvailable(): size_t
+GetNewSamplesSlotIndices(size_t max_count): 
 pair&lt;SlotIndexVector::const_reverse_iterator, SlotIndexVector::const_reverse_iterator&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3730</x>
      <y>1550</y>
      <w>300</w>
      <h>700</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;680.0;250.0;680.0;250.0;10.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2030</x>
      <y>2640</y>
      <w>650</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::SamplePtr
--
using pointer = const SampleType*
--
-managed_object_: pointer
-event_slot_index_: EventDataControl::SlotIndexType
-event_data_control_: EventDataControl*
--
get() : pointer
operator*() : const SampleType&amp;
operator-&gt;() : pointer
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2320</x>
      <y>2560</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3130</x>
      <y>2650</y>
      <w>540</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>ProxyBaseView
--
--
+ProxyBaseView(proxy_base : ProxyBase&amp;)
+GetImpl() : ProxyBinding&amp;
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3410</x>
      <y>2600</y>
      <w>30</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3100</x>
      <y>600</y>
      <w>160</w>
      <h>2110</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;friend&gt;&gt;</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0;10.0;2090.0;30.0;2090.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1910</x>
      <y>90</y>
      <w>680</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>bmw::result::ErrorDomain
--
--
+MessageFor(code : const bmw::result::ErrorCode&amp;) const = 0 : amp::string_view 
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1910</x>
      <y>200</y>
      <w>680</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>ComErrorDomain
--
--
+MessageFor(code : const bmw::result::ErrorCode&amp;) const = 0 : amp::string_view  
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2220</x>
      <y>160</y>
      <w>30</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>2050</x>
      <y>0</y>
      <w>430</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Note
--
Association of Error class is deliberately not shown
as it is used in multiple classes to handle
error cases</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1910</x>
      <y>310</y>
      <w>680</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Stereotype&gt;&gt;
global function
--
+MakeError(code : ComErrc, message : bmw::StringLiteral) : bmw::result::Error
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2580</x>
      <y>230</y>
      <w>120</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0;70.0;120.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4010</x>
      <y>1760</y>
      <w>630</w>
      <h>370</h>
    </coordinates>
    <panel_attributes>lola::ProxyEventCommon
--
-element_fq_id_: ElementFqId
-parent_: lola::Proxy&amp;
-subscription_event_state_machine_: std::shared_ptr&lt;SubscriptionStateMachine&gt;
-slot_collector_: amp::optional&lt;SlotCollector&gt;
--
+ProxyEventCommon(lola::Proxy&amp; parent, ElementFqId)
+Subscribe(size_t max_sample_count): void
+Unsubscribe(): void
+GetSubscriptionState() : SubscriptionState
+SetReceiveHandler(EventReceiveHandler handler) : void
+UnsetReceiveHandler(EventReceiveHandler handler) : void
+GetEventSourcePid() : pid_t 
+GetElementFQId() : ElementFqId
+GetNumNewSamplesAvailable(): Result&lt;std::size_t&gt;
+GetNewSamplesSlotIndices(size_t max_count): 
 pair&lt;SlotIndexVector::const_reverse_iterator, SlotIndexVector::const_reverse_iterator&gt;
--
Notes:
SlotCollector is instantiated by the SubscriptionStateMachine when it enters the 
Subscribed state. It is cleared if it subsequently leaves the Subscribed state.
All subscription operations are implemented in the separate class 
SubscriptionStateMachine and the associated states. </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4220</x>
      <y>1700</y>
      <w>160</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
common_dispatch_</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3230</x>
      <y>1720</y>
      <w>690</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>template=SampleType
mw::com::impl::ProxyField

--
+Subscribe(size_t max_sample_count): ResultBlank
+GetSubscriptionState() : SubscriptionState
+Unsubscribe(): void
+GetFreeSampleCount(): Result&lt;size_t&gt;
+GetNumNewSamplesAvailable(): Result&lt;std::size_t&gt;
+SetReceiveHandler(EventReceiveHandler handler) : ResultBlank
+UnsetReceiveHandler() : ResultBlank
template &lt;typename F&gt;
+GetNewSamples(F&amp;&amp; receiver, size_t max_num_samples): Result&lt;size_t&gt;
+Get(): Future&lt;SampleType&gt;
+Set(const SampleType&amp; value): Future&lt;SampleType&gt;
--
-event_dispatch_ : impl::ProxyEvent&lt;SampleType&gt;
-service_method_dispatch_get_&lt;void , Future&lt;SampleType&gt;&gt;: impl::ServiceMethod
-service_method_dispatch_set_&lt;SampleType, Future&lt;SampleType&gt;&gt;: impl::ServiceMethod
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3350</x>
      <y>1550</y>
      <w>520</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>template=ServiceCallArgTypes
mw::com::impl::ProxyServiceMethod
--
+Call(ServiceCallArgTypes in, ServiceCallArgTypes out)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3500</x>
      <y>1630</y>
      <w>210</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
r1=service_method_dispatch_ 
m2=0..2
</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3280</x>
      <y>1360</y>
      <w>140</w>
      <h>390</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
r1=event_dispatch_</panel_attributes>
    <additional_attributes>10.0;370.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4690</x>
      <y>1430</y>
      <w>600</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>template=ServiceCallArgTypes
/ProxyServiceMethodBindings/
--
/+Call(ServiceCallArgTypes in, ServiceCallArgTypes out) = 0/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4690</x>
      <y>1650</y>
      <w>610</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>template=ServiceCallArgTypes
lola::ProxyServiceMethod
--
+Call(ServiceCallArgTypes in, ServiceCallArgTypes out)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3550</x>
      <y>1490</y>
      <w>1160</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0;1140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4940</x>
      <y>1560</y>
      <w>30</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>830</x>
      <y>1390</y>
      <w>870</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>template=SampleType
bmw::mw::com::impl::SkeletonField
--
+SkeletonField(SkeletonBase&amp; parent, std::string field_name)
+Update(const SampleType&amp; data): ResultBlank 
+Update(SampleAllocateePtr&lt;SampleType&gt;): ResultBlank
+Allocate(): SampleAllocateePtr&lt;SampleType&gt;
+RegisterGetHandler(std::function&lt;Future&lt;SampleType&gt;()&gt; getHandler): Result&lt;void&gt; 
+RegisterSetHandler(std::function&lt;Future&lt;SampleType&gt;(const SampleType&amp; data)&gt; setHandler):Result&lt;void&gt;
--
-IsInitialValueSaved(): bool
-DoDeferredUpdate(): ResultBlank
-skeleton_service_method_dispatch_get_: SkeletonServiceMethod&lt;Future&lt;SampleType&gt;, void&gt;
-skeleton_service_method_dispatch_set_: SkeletonServiceMethod &lt;void, SampleType&gt;
--
SkeletonField will dispatch update call to impl::skeletonEvent via skeleton_event_dispatch_. On moving, the 
SkeletonField should call UpdateField on its parent skeleton so that the parent stores its new address.
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>1620</y>
      <w>590</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>template=&lt;inArgs..., outArgs&gt;
/SkeletonServiceMethodBinding/
--
/+/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>1770</y>
      <w>590</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>template=&lt;inArgs..., outArgs&gt;
SkeletonServiceMethod
--
+

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>410</x>
      <y>1710</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2030</x>
      <y>1620</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1560</x>
      <y>940</y>
      <w>250</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>230.0;10.0;10.0;10.0;10.0;460.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3140</x>
      <y>850</y>
      <w>120</w>
      <h>1030</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0;10.0;1000.0;90.0;1000.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>1400</y>
      <w>640</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>template=&lt;InArgs..., OutArgs&gt;
SkeletonServiceMethod
--
+RegisterCallHandler(std::function&lt;OutArgs(InArgs...)): Result&lt;void&gt;
--
Notes:
SkeletonServiceMethod will have partial template specilalization for InArgs</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>710</x>
      <y>1470</y>
      <w>140</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..2</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>190</x>
      <y>1490</y>
      <w>40</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4510</x>
      <y>2270</y>
      <w>100</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4070</x>
      <y>2120</y>
      <w>130</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=slot_collector_</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;230.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1790</x>
      <y>1010</y>
      <w>610</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>bmw::mw::com::impl::SkeletonEventBase
--
- binding_: std::unique_ptr&lt;SkeletonEventBindingBase&gt;
--
+SkeletonEventBase(std::unique_ptr&lt;SkeletonEventBindingBase&gt; binding)
+PrepareOffer(): bmw::ResultBlank
+PrepareStopOffer(): void
+UpdateSkeletonReference(SkeletonBase&amp; base_skeleton): void
--
Notes:
SkeletonEventBase is moveable but not copyable.
In production, the constructor receives a SkeletonEventBinding&lt;SampleType&gt; 
from impl::SkeletonEvent which is assigned to the base class pointer, binding_. 
This allows SkeletonEventBase to access the type independent methods of 
SkeletonEventBindingBase. Derived classes i.e. impl::SkeletonEvent should 
downcast binding_ to a SkeletonEventBinding&lt;SampleType&gt; in order to use type 
dependent methods. On moving, the SkeletonEvent should call UpdateEvent on its 
parent skeleton so that the parent stores its new address.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1960</x>
      <y>1270</y>
      <w>30</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2250</x>
      <y>1190</y>
      <w>230</w>
      <h>420</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;10.0;210.0;10.0;210.0;400.0;10.0;400.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1470</x>
      <y>710</y>
      <w>340</w>
      <h>880</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
knows</panel_attributes>
    <additional_attributes>320.0;860.0;240.0;860.0;240.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>730</x>
      <y>1010</y>
      <w>790</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>bmw::mw::com::impl::SkeletonFieldBase
--
+SkeletonFieldBase(SkeletonBase&amp;, amp::string_view field_name, std::unique_ptr&lt;impl::SkeletonEventBase&gt;)
+PrepareOffer(): ResultBlank
+PrepareStopOffer(): void
+UpdateSkeletonReference(SkeletonBase&amp; base_skeleton): void
--
#skeleton_event_dispatch_ : std::unique_ptr&lt;impl::SkeletonEventBase&gt;
#skeleton_base_ : std::reference_wrapper&lt;SkeletonBase&gt;
#field_name_ : amp::string_view
#was_prepare_offer_called_ : bool
--
/-IsInitialValueSaved(): bool = 0/
/-DoDeferredUpdate(): ResultBlank = 0/
-is_initial_value_set_: bool
--
In production, the constructor receives a SkeletonEvent&lt;SampleType&gt; from 
impl::SkeletonField which is assigned to the base class pointer, skeleton_event_dispatch_. 
This allows BaseSkeletonField to access the type independent methods of SkeletonEventBase. 
Derived classes i.e. impl::SkeletonField should downcast skeleton_event_dispatch_ to a 
SkeletonEvent&lt;SampleType&gt; in order to use type dependent methods.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1170</x>
      <y>1320</y>
      <w>30</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1550</x>
      <y>730</y>
      <w>260</w>
      <h>690</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>240.0;20.0;10.0;20.0;10.0;670.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>1910</y>
      <w>860</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>template=SampleType
SkeletonFieldBindingFactory
--
_+CreateEventBinding(InstanceIdentifier, SkeletonBase&amp; parent, std::string field_name): SkeletonEventBinding_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>800</x>
      <y>1610</y>
      <w>80</w>
      <h>350</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>60.0;330.0;10.0;330.0;10.0;10.0;30.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1660</x>
      <y>1800</y>
      <w>150</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>130.0;10.0;70.0;10.0;70.0;160.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3060</x>
      <y>2760</y>
      <w>900</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>ProxyFieldBindingFactory
--
_ template &lt;typename SampleType&gt;_
_+CreateEventBinding(ProxyBase&amp; parent, amp::string_view field_name): std::unique_ptr&lt;ProxyEventBinding&lt;SampleType&gt; &gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3000</x>
      <y>1990</y>
      <w>250</w>
      <h>830</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
uses</panel_attributes>
    <additional_attributes>60.0;810.0;10.0;810.0;10.0;10.0;230.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3950</x>
      <y>1460</y>
      <w>80</w>
      <h>1370</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>60.0;10.0;60.0;80.0;20.0;80.0;20.0;1350.0;10.0;1350.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1510</x>
      <y>1060</y>
      <w>300</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1 event_dispatch_
m1=1</panel_attributes>
    <additional_attributes>10.0;10.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3240</x>
      <y>930</y>
      <w>630</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>bmw::mw::com::impl::ProxyEventBase
--
+ProxyEventBase(std::unique_ptr&lt;ProxyEventBindingBase&gt; proxy_event_binding)

+Subscribe(size_t max_sample_count): ResultBlank
+GetSubscriptionState() : SubscriptionState
+Unsubscribe(): void
+GetFreeSampleCount(): Result&amp;lt;size_t&amp;gt;
+GetNumNewSamplesAvailable(): Result&amp;lt;std::size_t&amp;gt;
+SetReceiveHandler(EventReceiveHandler handler) : ResultBlank
+UnsetReceiveHandler() : ResultBlank
+IsBindingValid() : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3550</x>
      <y>1110</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
</diagram>
