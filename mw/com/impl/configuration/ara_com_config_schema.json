// *******************************************************************************>
// Copyright (c) 2024 Contributors to the Eclipse Foundation
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
// This program and the accompanying materials are made available under the
// terms of the Apache License Version 2.0 which is available at
// https://www.apache.org/licenses/LICENSE-2.0
// SPDX-License-Identifier: Apache-2.0 #
// *******************************************************************************


{
  "$schema": "http://json-schema.org/draft-07/schema",
  "description": "ara::com configuration",
  "type": "object",
  "required": [
    "serviceTypes",
    "serviceInstances"
  ],
  "additionalProperties": false,
  "properties": {
    "serviceTypes": {
      "type": "array",
      "description": "Overall element for service types",
      "items": {
        "type": "object",
        "description": "All information defining a service type and its binding specific mapping",
        "required": [
          "serviceTypeName",
          "version",
          "bindings"
        ],
        "additionalProperties": false,
        "properties": {
          "serviceTypeName": {
            "type": "string",
            "description": "Represents FQN of the Service in the form of an AUTOSAR short-name-path of the representing ServiceInterface. This is a binding/technology independent name!"
          },
          "version": {
            "type": "object",
            "description": "Service version. This info is redundant as it is generated also into C++ sources.",
            "required": [
              "major",
              "minor"
            ],
            "additionalProperties": false,
            "properties": {
              "major": {
                "type": "integer",
                "description": "std::uint32_t of major of service"
              },
              "minor": {
                "type": "integer",
                "description": "std::uint32_t of minor of service"
              }
            }
          },
          "bindings": {
            "type": "array",
            "description": "List of available bindings for this serviceType",
            "items": {
              "type": "object",
              "description": "A binding specific config for this serviceType",
              "required": [
                "binding",
                "serviceId"
              ],
              "additionalProperties": false,
              "properties": {
                "binding": {
                  "type": "string",
                  "enum": [
                    "SOME/IP",
                    "SHM"
                  ],
                  "description": "Binding technology"
                },
                "serviceId": {
                  "type": "integer",
                  "description": "Binding technology specific service id, it might be 16 or 64 bit. For LoLa/Shm and SOME/IP we have 16 bit values."
                },
                "events": {
                  "type": "array",
                  "description": "optional (serviceType may have no events) binding specific event configurations of this serviceType.",
                  "items": {
                    "type": "object",
                    "description": "Binding specific event configuration",
                    "required": [
                      "eventName",
                      "eventId"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "eventName": {
                        "type": "string",
                        "description": "Short name of the event within the serviceType (not FQN)"
                      },
                      "eventId": {
                        "type": "integer",
                        "description": "Binding technology specific event id. LoLa supports 8 bit, while SOME/IP supports 15 bit."
                      }
                    }
                  }
                },
                "fields": {
                  "type": "array",
                  "description": "optional (serviceType may have no fields) binding specific field configurations of this serviceType.",
                  "items": {
                    "type": "object",
                    "description": "Misc field configuration",
                    "required": [
                      "fieldName",
                      "fieldId"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "fieldName": {
                        "type": "string",
                        "description": "Short name of the field within the serviceType."
                      },
                      "fieldId": {
                        "type": "integer",
                        "description": "Binding technology specific field id. LoLa supports 8 bit, while SOME/IP supports 15 bit."
                      },
                      "Get": {
                        "type": "boolean",
                        "description": "Specify if a getter function is available. Default value is false."
                      },
                      "Set": {
                        "type": "boolean",
                        "description": "Specify if a setter function is available. Default value is false."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "serviceInstances": {
      "type": "array",
      "description": "Overall element for service instances",
      "items": {
        "type": "object",
        "description": "All information defining a service instance",
        "required": [
          "instanceSpecifier",
          "serviceTypeName",
          "version",
          "instances"
        ],
        "additionalProperties": false,
        "properties": {
          "instanceSpecifier": {
            "type": "string",
            "description": "Represents the InstanceSpecifier value. This is itself an AUTOSAR short-name-path (representing a port prototype of a software component instance). For comfort reasons, we allow also the usage of abbreviated short-name-paths (short-name-paths with a number of components starting from root being removed) in case they are still unique within an executable (this json/configuration is a per executable config!). From AUTOSAR concept perspective an executable contains a 'root sw-component', which itself can be a nested composition of AdaptiveApplicationSwComponentTypes). Because of this 'compositing feature' it could be the case, that the direct short-name of a port prototype isn’t unique within the composition making up the executable. In reality however the port names are 95% unique and forcing the usage of lengthy short-name-paths can be annoying! So this translates to the following rules:\n1. A config file with two “instanceSpecifiers”, where one is only a trailing substring of the other is INVALID!\n2. If user code makes a resolve/lookup providing an 'instanceSpecifier' in the form of an abbreviated short-name-path, which turns out NOT being unique with respect to the config, this is a hard programming/configuration fault, which shall lead to an abort."
          },
          "serviceTypeName": {
            "type": "string",
            "description": "Represents FQN of the Service in the form of an AUTOSAR short-name-path of the representing ServiceInterface. This is a binding/technology independent name!"
          },
          "version": {
            "type": "object",
            "description": "Service version. This info is redundant as it is generated also into C++ sources.",
            "required": [
              "major",
              "minor"
            ],
            "additionalProperties": false,
            "properties": {
              "major": {
                "type": "integer",
                "description": "std::uint32_t of major of service"
              },
              "minor": {
                "type": "integer",
                "description": "std::uint32_t of minor of service"
              }
            }
          },
          "instances": {
            "type": "array",
            "description": "List of instances available",
            "items": {
              "type": "object",
              "description": "A service instance bound to a specific technology",
              "required": [
                "asil-level",
                "binding"
              ],
              "additionalProperties": false,
              "properties": {
                "instanceId": {
                  "type": "integer",
                  "description": "(optional) 16 bit instance id, contains no value if any instance id is requested (only possible on subscriber/R-port side)"
                },
                "asil-level": {
                  "type": "string",
                  "enum": [
                    "QM",
                    "B"
                  ],
                  "description": "ASIL level: On provider side B means, service instance provides ASIL-B quality and can therefore serve QM and ASIL-B consumers. B on consumer side means: Needs ASIL-B qualified provider."
                },
                "binding": {
                  "type": "string",
                  "enum": [
                    "SOME/IP",
                    "SHM"
                  ],
                  "description": "Binding technology"
                },
                "shm-size": {
                  "type": "integer",
                  "description": "(optional) SHM-Specific attribute that defines how big (in bytes) the underlying shared memory object shall be created. Property gets only evaluated on provider/skeleton side. If no value is given, the size is internally calculated based on storage needs of events (type, number of slots) with the calculation method set in global.shm-size-calc-mode"
                },
                "permission-checks": {
                  "type": "string",
                  "enum": [
                    "file-permissions-on-empty",
                    "strict"
                  ],
                  "default": "file-permissions-on-empty",
                  "description": "This property controls, how empty lists (no user ids given) in allowedProviders/allowedConsumers are interpreted. In case of file-permissions-on-empty an empty list will fall back to access-check based on basic ugo file-system-rights. In case of strict an empty list of user ids really means no-one can access (allowedConsumers) or no provider is accepted (allowedProviders)"
                },
                "allowedConsumer": {
                  "type": "object",
                  "description": "Optional list of user-ids that are allowed to consume this service instance according to their ASIL-Level. Used by LoLa applications in the role as service instance provider to restrict access to its shared mem objects to the given user-ids and also allow those user-ids to send messages to it. Property is irrelevant for consumer/proxy side and optional for provider/skeleton side, because if not configured the access rights fall back to basic 'ugo' access rights for created shm-objects/message passing endpoints , unless <strict> is configured for <permission-checks>.",
                  "additionalProperties": false,
                  "properties": {
                    "QM": {
                      "type": "array",
                      "description": "The list of user-ids that are allowed to consume this service instance in ASIL-QM.",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "B": {
                      "type": "array",
                      "description": "The list of user-ids that are allowed to consume this service instance in ASIL-B. This is only relevant/makes only sense, if the providing service instance provides ASIL-B quality, which in turn requires the config property global.asil-level == B",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "allowedProvider": {
                  "type": "object",
                  "description": "Optional list of user-ids that are allowed to provide this service instance according to their ASIL-Level. Used by LoLa applications in the role as service instance consumer to allow those user-ids to send messages to it. Also, if this property is configured, the consumers opening/mapping the shared-memory objects for the given serviceInstance will check whether such an object is owned by one of the configured 'allowedProviders' and will terminate if it's not the case. If this property is not configured or the list is empty, the consumer will accept shm-objects from a provider with any user-id, but the ability to accept messages from the provider may be imparted.",
                  "additionalProperties": false,
                  "properties": {
                    "QM": {
                      "type": "array",
                      "description": "The list of user-ids that are allowed to provide this service instance in ASIL-QM.",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "B": {
                      "type": "array",
                      "description": "The list of user-ids that are allowed to provide this service instance in ASIL-B.",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "events": {
                  "type": "array",
                  "description": "(optional) Binding technology specific configuration of events within this instance",
                  "items": {
                    "type": "object",
                    "description": "Binding specific event configuration",
                    "required": [
                      "eventName"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "eventName": {
                        "type": "string",
                        "description": "Mandatory Short name of the event within the serviceType (not FQN)"
                      },
                      "maxSamples": {
                        "type": "integer",
                        "description": "DEPRECATED! Use <numberOfSampleSlots> instead. Mandatory LoLa specific provider/skeleton side setting, how many sample slots shall be allocated. Value needs to be between 1 and 65535!"
                      },
                      "numberOfSampleSlots": {
                        "type": "integer",
                        "description": "Mandatory LoLa specific provider/skeleton side setting, how many sample slots shall be allocated. Value needs to be between 1 and 65535!"
                      },
                      "maxSubscribers": {
                        "type": "integer",
                        "description": "Mandatory LoLa specific provider/skeleton side setting, how many subscribers shall be supported at max."
                      },
                      "enforceMaxSamples": {
                        "type": "boolean",
                        "description": "Optional flag, which describes, whether the value configured in <maxSamples> is enforced by the implementation during event-subscribe calls. Default value is TRUE. I.e. <maxSamples> is enforced, so that any subscribe call with its given maxSampleCount, which would overflow <maxSamples>, will be rejected. "
                      },
                      "enableIpcTracing": {
                        "type": "boolean",
                        "description": "Optional flag, which describes, whether this event shall be enabled for IPCTracing. Default is false. If it is disabled and a trace-filter-config demands this field being traced, a WARN message will be logged.",
                        "default": false
                      }
                    }
                  }
                },
                "fields": {
                  "type": "array",
                  "description": "(optional) Binding technology specific configuration of fields within this instance",
                  "items": {
                    "type": "object",
                    "description": "Binding specific field configuration",
                    "required": [
                      "fieldName"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "fieldName": {
                        "type": "string",
                        "description": "Mandatory Short name of the field within the serviceType (not FQN)"
                      },
                      "numberOfSampleSlots": {
                        "type": "integer",
                        "description": "Mandatory LoLa specific provider/skeleton side setting, how many sample slots shall be allocated. Value needs to be between 1 and 65535!"
                      },
                      "maxSubscribers": {
                        "type": "integer",
                        "description": "Mandatory LoLa specific provider/skeleton side setting, how many subscribers shall be supported at max."
                      },
                      "enforceMaxSamples": {
                        "type": "boolean",
                        "description": "Optional flag, which describes, whether the value configured in <numberOfSampleSlots> (or deprecated <maxSamples>) is enforced by the implementation during field-subscribe calls. Default value is TRUE. I.e. <numberOfSampleSlots> is enforced, so that any subscribe call with its given maxSampleCount, which would overflow <numberOfSampleSlots>, will be rejected. "
                      },
                      "enableIpcTracing": {
                        "type": "boolean",
                        "description": "Optional flag, which describes, whether this field shall be enabled for IPCTracing. Default is false. If it is disabled and a trace-filter-config demands this field being traced, a WARN message will be logged.",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "global": {
      "type": "object",
      "description": "This section contains type and instance independent settings that apply to the application itself.",
      "additionalProperties": false,
      "properties": {
        "asil-level": {
          "type": "string",
          "description": "ASIL level the entire process/application fulfills. If this property is NOT defined, ASIL level QM is assumed. It will be crosschecked if, according to serviceInstances configuration, a service instance shall be provided with ASIL level B, but processAsilLevel is set QM. If this is the case, the configuration is invalid and will be dismissed.",
          "enum": [
            "QM",
            "B"
          ],
          "default": "QM"
        },
        "queue-size": {
          "type": "object",
          "description": "Configures the queue size for incoming message ports. This is important for some queue technologies that have an upper size bound and will drop messages in case the queue overflows so that subscription messages or event updates may get lost. If this happens, this number must be raised for the respective receiving queue. Note, that e.g. on Linux, when increasing the message queue size, it can be necessary to increase a kernel parameter! See: /proc/sys/fs/mqueue/msg_max",
          "additionalProperties": false,
          "properties": {
            "QM-receiver": {
              "description": "Defines the queue size for reception incoming messages from QM clients",
              "type": "integer",
              "default": 10
            },
            "B-receiver": {
              "description": "Defines the queue size for reception incoming messages from B clients. Only relevant/processed in case the global property asil-level is set to <B>, otherwise it gets ignored.",
              "type": "integer",
              "default": 10
            },
            "B-sender": {
              "description": "Defines the queue size for sending outgoing messages to QM clients. Max value = 100. Only relevant/processed in case the global property asil-level is set to <B>, otherwise it gets ignored. Note: A specific send-queue is used only in case an ASIL-B LoLa app sends to ASIL-QM LoLa apps, to decouple the sending app completely from misbehaving receiving QM LoLa apps.",
              "type": "integer",
              "default": 20
            }
          }
        },
        "shm-size-calc-mode": {
          "description": "How shall the sizes of the shm-objects get calculated: Via an initial simulation run against a heap-memory resource or via a rough calculation based on used data type sizes (sizeof), configured slot-numbers and some estimation about STL container internal footprint? The former has the advantage of perfect accuracy, but adds a minimal runtime overhead at startup plus some initial temporary heap allocation. The latter is more inaccurate and will typically need more memory during runtime as we are typically adding some buffer into the estimation. Note: If the simulation turns out to be working well, we might in future only support it!",
          "enum": [
            "SIMULATION",
            "ESTIMATION"
          ],
          "default": "SIMULATION"
        }
      }
    },
    "tracing": {
      "type": "object",
      "description": "This section contains general settings for IPC Tracing functionality",
      "required": [
        "applicationInstanceID"
      ],
      "additionalProperties": false,
      "properties": {
        "enable": {
          "type": "boolean",
          "description": "enables (or disables) IPC Tracing for the current mw::com application/process.",
          "default": true
        },
        "applicationInstanceID": {
          "type": "string",
          "description": "identification with which this mw::com application shall register itself with the IPC Tracing subsystem. Hint: Typically re-using the DLT AppID could make sense."
        },
        "traceFilterConfigPath": {
          "type": "string",
          "description": "Path, where the trace filter config json is located (adhering to the schema 'comtrace_config.json' schema)",
          "default": "./etc/mw_com_trace_filter.json"
        }
      }
    }
  }
}
