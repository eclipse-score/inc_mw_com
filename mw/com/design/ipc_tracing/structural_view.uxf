<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>16</x>
      <y>480</y>
      <w>1080</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>TracingFilterConfig
--

+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonEventTracePointType skeleton_event_trace_point_type) const noexcept : bool
+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonFieldTracePointType skeleton_field_trace_point_type) const noexcept : bool
+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyEventTracePointType proxy_event_trace_point_type) const noexcept : bool
+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyFieldTracePointType proxy_field_trace_point_type) const noexcept : bool

+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonEventTracePointType skeleton_event_trace_point_type) noexcept : void
+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonFieldTracePointType skeleton_field_trace_point_type) noexcept : void
+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyEventTracePointType proxy_event_trace_point_type) noexcept : void
+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyFieldTracePointType proxy_field_trace_point_type) noexcept : void


--
-config_names : std::set&lt;std::string&gt;
-skeleton_event_trace_points : std::unordered_map&lt;TracePointKey, std::vector&lt;InstanceID&gt;
-skeleton_field_trace_points : std::unordered_map&lt;TracePointKey, std::vector&lt;InstanceID&gt;
-proxy_event_trace_points : std::unordered_map&lt;TracePointKey, std::vector&lt;InstanceID&gt;
-proxy_field_trace_points : std::unordered_map&lt;TracePointKey, std::vector&lt;InstanceID&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>16</x>
      <y>16</y>
      <w>264</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
SkeletonEventTracePointType : std::uint8_t
--
INVALID = 0U,
SEND,
SEND_WITH_ALLOCATE,
SUBSCRIBE,
UNSUBSCRIBE
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>288</x>
      <y>16</y>
      <w>272</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
SkeletonFieldTracePointType : std::uint8_t
--
INVALID = 0U,
UPDATE,
UPDATE_WITH_ALLOCATE,
GET_CALL,
GET_CALL_RESULT,
SET_CALL,
SET_CALL_RESULT,
SUBSCRIBE,
UNSUBSCRIBE

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>568</x>
      <y>16</y>
      <w>232</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
ProxyEventTracePointType : std::uint8_t
--
INVALID = 0,
SUBSCRIBE,
UNSUBSCRIBE,
SUBSCRIBE_STATE_CHANGE,
SET_SUBSCRIPTION_STATE_CHANGE_HANDLER,
UNSET_SUBSCRIPTION_STATE_CHANGE_HANDLER,
SUBSCRIPTION_STATE_CHANGE_HANDLER_CALLBACK,
SET_RECEIVE_HANDLER,
UNSET_RECEIVE_HANDLER,
RECEIVE_HANDLER_CALLBACK,
GET_NEW_SAMPLES,
GET_NEW_SAMPLES_CALLBACK
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>16</x>
      <y>816</y>
      <w>272</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>TracePointKey
--

+service_element : ServiceElementIdentifierView
+trace_point_type : std::uint8_t</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>808</x>
      <y>16</y>
      <w>232</w>
      <h>248</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
ProxyFieldTracePointType : std::uint8_t
--
INVALID = 0,
SUBSCRIBE,
UNSUBSCRIBE,
SUBSCRIBE_STATE_CHANGE,
SET_SUBSCRIPTION_STATE_CHANGE_HANDLER,
UNSET_SUBSCRIPTION_STATE_CHANGE_HANDLER,
SUBSCRIPTION_STATE_CHANGE_HANDLER_CALLBACK,
SET_RECEIVE_HANDLER,
UNSET_RECEIVE_HANDLER,
RECEIVE_HANDLER_CALLBACK,
GET_NEW_SAMPLES,
GET_NEW_SAMPLES_CALLBACK,
SET,
SET_RESULT,
GET,
GET_RESULT

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>808</y>
      <w>432</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>template=TracePointKey
std::hash
--
+operator()(const TracePointKey&amp; k) const noexcept : std::size_t </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>936</x>
      <y>824</y>
      <w>448</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>/mw::com::impl::IRuntime/
--
/+resolve(const InstanceSpecifier&amp;) = 0: std::vector&lt;InstanceIdentifier&gt;/
/+GetTracingFilterConfig() = 0: const ITracingFilterConfig*/
/+getBindingRuntime(BindingType binding) = 0: IRuntimeBinding*/

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>848</x>
      <y>920</y>
      <w>536</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>mw::com::impl::Runtime
--
-runtime_bindings_ : std:unordered_map&lt;BindingType, std::unique_ptr&lt;IRuntimeBinding&gt; &gt;
--
_+Initialize() : void_
_+Initialize(int argc, bmw::StringLiteral argv) : void_
_+Initialize(std::string const&amp;) : void_
_+getInstance() : Runtime&amp;_

+Runtime(Configuration&amp;&amp; config)
+resolve(const InstanceSpecifier&amp;) : std::vector&lt;InstanceIdentifier&gt;
+GetTracingFilterConfig() : const ITracingFilterConfig*
+getBindingRuntime(BindingType binding) : IRuntimeBinding*
-- 
Notes:
Runtime is not copyable.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1096</x>
      <y>880</y>
      <w>24</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>800</x>
      <y>760</y>
      <w>136</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Creates in Initialize()</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;260.0;60.0;260.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>16</x>
      <y>264</y>
      <w>1232</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>/ITracingFilterConfig/
--
+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonEventTracePointType skeleton_event_trace_point_type) const noexcept = 0 : bool
+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonFieldTracePointType skeleton_field_trace_point_type) const noexcept = 0 : bool
+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyEventTracePointType proxy_event_trace_point_type) const noexcept = 0 : bool
+IsTracePointEnabled(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyFieldTracePointType proxy_field_trace_point_type) const noexcept = 0 : bool

+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonEventTracePointType skeleton_event_trace_point_type) noexcept = 0 : void
+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, SkeletonFieldTracePointType skeleton_field_trace_point_type) noexcept = 0 : void
+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyEventTracePointType proxy_event_trace_point_type) noexcept = 0 : void
+AddTracePoint(amp::string_view service_type, amp::string_view event_name, InstanceSpecifierView instance_specifier, ProxyFieldTracePointType proxy_field_trace_point_type) noexcept = 0 : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>592</x>
      <y>408</y>
      <w>24</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
</diagram>
