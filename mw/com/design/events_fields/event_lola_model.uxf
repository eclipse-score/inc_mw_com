<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <help_text>z// Uncomment the following line to change the fontsize and font:
// fontsize=14
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/-or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>605</y>
      <w>225</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>template=SampleType
/SkeletonEventBinding/
--
/+Send(SampleType const&amp;) = 0: void/
/+Send(SampleAllocateePtr&lt;SampleType&gt;) = 0: void/
/+Allocate() = 0: SampleAllocateePtr&lt;SampleType&gt;/
+GetMaxSize(): size_t

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>715</y>
      <w>290</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::SkeletonEvent
--
-event_data_storage: EventDataStorage&lt;SampleType&gt;*
-event_data_control: amp::optional&lt;EventDataControlComposite&gt;
--
+SkeletonEvent(parent : Skeleton&amp;,
    event_fqn : const ElementFqId,
    max_number_of_slots : const std::size_t ,
    enforce_max_samples : const bool)
+Send(SampleType const&amp;): void
+Send(SampleAllocateePtr&lt;SampleType&gt;): void
+Allocate(): SampleAllocateePtr&lt;SampleType&gt;
+PrepareOffer(): void
+PrepareStopOffer(): void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>305</x>
      <y>460</y>
      <w>315</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>template=SampleType
&lt;&lt;SharedMemory&gt;&gt;
&lt;&lt;typedef&gt;&gt;

--
lola::EventDataStorage std::vector&lt;SampleType,
			         std::scoped_allocator_adaptor&lt;PolymorphicOffsetAllocator&lt;SampleType&gt;&gt;

--
Note:
Exists once per Event
Only writable by Skeleton,
readable by all subscribed Proxies independent of ASIL level.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>610</y>
      <w>370</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>template=SampleType
SampleAllocateePtr
--
-internal: amp::variant&lt;amp::blank, lola::SampleAllocateePtr, std::unique_ptr&lt;SampleType&gt; &gt;
--
Notes: Variant is used to enable future
version were multiple backends are supported
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>325</x>
      <y>700</y>
      <w>295</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::SampleAllocateePtr
--
-managed_object_ : SampleType*
-event_data_control_ : EventDataControlComposite
--
+SampleAllocateePtr()
+SampleAllocateePtr(std::nullptr_t)
+SampleAllocateePtr(ptr : pointer, const EventDataControlComposite&amp;,
        const EventDataControl::SlotIndexType)
+GetReferencedSlot() const : EventDataControl::SlotIndexType
+ get() const : SampleType*
+ reset(std::nullptr_t) : void
+ swap(other : SampleAllocateePtr&amp;) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>435</x>
      <y>660</y>
      <w>15</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=white</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>880</x>
      <y>660</y>
      <w>480</w>
      <h>175</h>
    </coordinates>
    <panel_attributes>&lt;&lt;SharedMemory&gt;&gt;
lola::EventDataControlImpl
--
SlotIndexType uint16_t
--
-state_slots: std::vector&lt;std::atomic&lt;EventSlotStatusType::value_type&gt;,
        PolymorphicOffsetAllocator&lt;std::atomic&lt;EventSlotStatusType::value_type&gt; &gt; &gt;
--
+EventDataControlImpl(MemoryResourceProxy*, SlotIndexType maxSlots)
+AllocateNextSlot(): std::optional&lt;SlotIndexType&gt;
+EventReady(SlotIndexType, EventTimestamp): void
+Discard(SlotIndexType): void
+ReferenceNextEvent(lastSearchTime : EventTimestampType,
    upper_limit : const EventSlotStatus::EventTimeStamp = EventSlotStatus::TIMESTAMP_MAX): std::optional&lt;SlotIndexType&gt;
+DereferenceEvent(SlotIndexType eventSlotIndex): void
+GetNumNewEvents(reference_time : const EventSlotStatus::EventTimeStamp) const : std::size_t 
--
Note:
Exists at least once per provided Event.
For an ASIL-B provider/skeleton, which has ASIL-B AND ASIL-QM consumer/subscriber,
it exists twice: One Control section per ASIL-level in seperated shm-objects.
Readable/Writable by Skeleton and Proxies</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>925</x>
      <y>855</y>
      <w>270</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>&lt;&lt;SharedMemory&gt;&gt;
lola::EventSlotStatus
--
--
+EventSlotStatus(init_val : const value_type)
+IsInvalid(): bool
+IsInWriting(): bool
+MarkInWriting(): void
+MarkInvalid(): void
+GetReferenceCount(): SubscriberCount
+GetTimeStamp(): EventTimeStamp
+SetTimeStamp(EventTimeStamp)
+SetReferenceCount(SubscriberCount)
+IsUsed(): bool
+IsTimeStampBetween(EventTimeStamp min, EventTimeStamp max): bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>125</x>
      <y>660</y>
      <w>15</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>180</x>
      <y>570</y>
      <w>135</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
fg=dark_gray</panel_attributes>
    <additional_attributes>10.0;300.0;10.0;260.0;250.0;260.0;250.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1080</x>
      <y>830</y>
      <w>15</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1535</x>
      <y>185</y>
      <w>275</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>template=SampleType
SamplePtr
--
# internal: amp::variant&lt;lola::SamplePtr&gt;
--
+SampleAllocateePtr(std::nullptr_t)
+reset(const pointer ptr = SampleType*) : void
+swap(other : SampleAllocateePtr&lt;SampleType&gt;&amp;) : void
+get() : SampleType*
--
Notes: Variant is used to enable future
version were multiple backends are supported
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1655</x>
      <y>275</y>
      <w>15</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=white</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1530</x>
      <y>295</y>
      <w>275</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::SamplePtr
--
-managed_object_ : SampleType*
-event_data_control_ : EventDataControl*
--
+SamplePtr()
+SamplePtr(std::nullptr_t)
+SamplePtr(pointer ptr, const EventDataControlComposite&amp;,
                   const EventDataControl::SlotIndexType)
+get() const : pointer
+swap() : void


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>680</x>
      <y>265</y>
      <w>230</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>lola::Skeleton
--
-data: SkeletonDataStorage*
-control_qm_: SkeletonDataControl*
-control_asil_b_: SkeletonDataControl*
--
+Skeleton(const InstanceIdentifier&amp;, SkeletonEvents&amp;)
+PrepareOffer(): ResultBlank
+PrepareStopOffer(): ResultBlank
+Register(ElementFqId, size_t numberOfSlots): std::pair&lt;
        EventDataStorage*, EventDataControlComposite&gt;
+GetInstanceQualityType() const : QualityType
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>250</x>
      <y>290</y>
      <w>270</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;SharedMemory&gt;&gt;
&lt;&lt;typedef&gt;&gt;
SkeletonDataStorage std::map&lt;ElementFqId, offset_ptr&lt;void&gt; &gt;
--
Note:
The offset_ptr&lt;void&gt; SkeletonDataStorage stored as the value in the
map is an offset_ptr&lt;EventDataStorage&gt; which has its type erased. The 
type is identified later when samples are retrieved, see GetNewSamples 
for an explanation.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>615</x>
      <y>385</y>
      <w>310</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>&lt;&lt;SharedMemory&gt;&gt;
lola::SkeletonDataControl
--
+event_data_control_: std::map&lt;ElementFqId, EventDataControl&gt;
+skeleton_pid_: pid_t
--
+SkeletonDataControl(proxy : bmw::memory::shared::MemoryResourceProxy* const)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>515</x>
      <y>310</y>
      <w>175</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1..1</panel_attributes>
    <additional_attributes>330.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>755</x>
      <y>355</y>
      <w>25</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=1..2</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>920</x>
      <y>410</y>
      <w>190</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;340.0;10.0;340.0;500.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>245</x>
      <y>550</y>
      <w>625</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;
bg=black
fg=dark_gray</panel_attributes>
    <additional_attributes>1230.0;10.0;1230.0;620.0;10.0;620.0;10.0;580.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>940</x>
      <y>550</y>
      <w>15</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=2</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;220.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>225</y>
      <w>430</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>template=SampleType
/ProxyEventBinding/
--
/+GetNewSamples(amp::callback&lt;void(SamplePtr&lt;SampleType&gt;)&amp;&amp;, TrackerGuardFactory) = 0: Result&lt;size_t&gt;/
_# MakeSamplePtr(BindingSamplePtr&amp;&amp;, SampleReferenceGuard): SamplePtr&lt;SampleType&gt;_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>285</y>
      <w>425</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>template=SampleType
lola::ProxyEvent
--
parent: Proxy&amp;
subscription_state_machine: std::shared_ptr&lt;SubscriptionStateMachine&gt;
--
+ProxyEvent(ProxyBase&amp; parent, ElementFqId)
+Subscribe(size_t maxSampleCount): void
+GetSubscriptionState() : SubscriptionState
+Unsubscribe(): void
+SetReceiveHandler(amp::callback&lt;void(void)&gt;): void
+UnsetReceiveHandler(): void
+GetNewSamples(amp::callback&lt;void(SamplePtr&lt;SampleType&gt;)&amp;&amp;, TrackerGuardFactory): Result&lt;size_t&gt;
+GetNumNewSamplesAvailable(): Result&lt;size_t&gt;
--
Note.
Dispatches all calls to functions in ProxyEventBindingBase interface to 
ProxyEventCommon.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1205</x>
      <y>265</y>
      <w>15</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1355</x>
      <y>425</y>
      <w>220</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>260.0;10.0;260.0;40.0;420.0;40.0;420.0;540.0;10.0;540.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>450</y>
      <w>445</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>template=memory::shared::AtomicIndirectorType
EventDataControlCompositeImpl
--
-asil_qm_control_ : EventDataControl*
-asil_b_control_ : EventDataControl*
--
+EventDataControlCompositeImpl(asil_qm_control : EventDataControl* const)
+EventDataControlCompositeImpl(asil_qm_control : EventDataControl* const,
    asil_b_control : EventDataControl* const)
+AllocateNextSlot() : amp::optional&lt;EventDataControl::SlotIndexType&gt;
+EventReady(EventDataControl::SlotIndexType, EventSlotStatus::EventTimeStamp) : void
+Discard(EventDataControl::SlotIndexType) : void
+IsQmControlDisconnected(): bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>260</x>
      <y>790</y>
      <w>75</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>535</y>
      <w>200</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>/SkeletonEventBindingBase/
--
/+PrepareOffer() = 0: void/
/+PrepareStopOffer() = 0: void/
/+GetMaxSize() = 0: size_t/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>125</x>
      <y>575</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1105</x>
      <y>450</y>
      <w>340</w>
      <h>195</h>
    </coordinates>
    <panel_attributes>lola::ProxyEventCommon
--
-element_fq_id_: ElementFqId
-parent_: lola::Proxy&amp;
-subscription_event_state_machine_: std::shared_ptr&lt;SubscriptionStateMachine&gt;
-slot_collector_: amp::optional&lt;SlotCollector&gt;
--
+ProxyEventCommon(lola::Proxy&amp; parent, ElementFqId)
+Subscribe(size_t max_sample_count): void
+Unsubscribe(): void
+GetSubscriptionState() : SubscriptionState
+SetReceiveHandler(EventReceiveHandler handler) : void
+UnsetReceiveHandler(EventReceiveHandler handler) : void
+GetEventSourcePid() : pid_t 
+GetElementFQId() : ElementFqId
+GetNumNewSamplesAvailable(): Result&lt;std::size_t&gt;
+GetNewSamplesSlotIndices(size_t max_count): 
 pair&lt;SlotIndexVector::const_reverse_iterator, SlotIndexVector::const_reverse_iterator&gt;
--
Notes:
lola::ProxyEventCommon is not moveable or copyable.
SlotCollector is instantiated by the SubscriptionStateMachine when it enters the 
Subscribed state. It is cleared if it subsequently leaves the Subscribed state.
All subscription operations are implemented in the separate class 
SubscriptionStateMachine and the associated states. 
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1495</x>
      <y>365</y>
      <w>45</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1500</x>
      <y>245</y>
      <w>45</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1355</x>
      <y>765</y>
      <w>185</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>350.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1140</x>
      <y>145</y>
      <w>215</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>/ProxyEventBindingBase/
--
/+Subscribe(size_t maxSampleCount) = 0: void/
/+Unsubscribe() = 0: void/
/+GetSubscriptionState() = 0: SubscriptionState/
/+SetReceiveHandler(EventReceiveHandler) = 0: void/
/+UnsetReceiveHandler() = 0: void/
/+GetNumNewSamplesAvailable() = 0: Result&lt;size_t&gt;/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1205</x>
      <y>210</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1380</x>
      <y>150</y>
      <w>110</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>SubscriptionState
&lt;&lt;enum&gt;&gt;
--
SUBSCRIBED
NOT_SUBSCRIBED
SUBSCRIPTION_PENDING</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1350</x>
      <y>170</y>
      <w>40</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>905</x>
      <y>305</y>
      <w>95</w>
      <h>155</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black</panel_attributes>
    <additional_attributes>170.0;290.0;170.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>235</x>
      <y>635</y>
      <w>105</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black</panel_attributes>
    <additional_attributes>190.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1355</x>
      <y>405</y>
      <w>280</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>540.0;10.0;540.0;580.0;10.0;580.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>805</y>
      <w>320</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black</panel_attributes>
    <additional_attributes>620.0;60.0;620.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>550</y>
      <w>265</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>510.0;10.0;510.0;420.0;10.0;420.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1285</x>
      <y>425</y>
      <w>15</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;
bg=black
fg=dark_gray</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1640</x>
      <y>535</y>
      <w>280</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lola::SubscriptionStateMachine
--
Note.
State machine that manages subscriptions to a ProxyEvent.
Details about the state machine can be found in
proxy_event_state_machine.uxf and proxy_event_state_machine_model.uxf</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>425</x>
      <y>365</y>
      <w>25</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
bg=black
m2=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>680</x>
      <y>195</y>
      <w>230</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>/SkeletonBinding/
--
-events_: SkeletonEvents&amp;
--
+SkeletonBinding(SkeletonEvents&amp;): void
/+PrepareStopOffer() = 0: void/
/+PrepareOffer() = 0: Result&lt;void&gt;/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>140</x>
      <y>170</y>
      <w>385</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lola::ShmPathBuilder
--
--
+ShmPathBuilder(instance_deployment : const LolaServiceInstanceDeployment&amp;,
    type_deploymenttype_deployment : const LolaServiceTypeDeployment&amp;)
+GetControlChannelFileName(channel_type : const QualityType) : amp::optional&lt;std::string&gt;
+GetDataChannelFileName() : amp::optional&lt;std::string&gt;
+GetControlChannelPath(channel_type : const QualityType) : amp::optional&lt;std::string&gt;
+GetDataChannelPath() : amp::optional&lt;std::string&gt;
+GetDataChannelShmName() : amp::optional&lt;std::string&gt;
+GetControlChannelShmName(const QualityType channel_type) : amp::optional&lt;std::string&gt;

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>520</x>
      <y>220</y>
      <w>170</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
bg=black
uses</panel_attributes>
    <additional_attributes>10.0;10.0;230.0;10.0;230.0;130.0;320.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1530</x>
      <y>720</y>
      <w>420</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lola::SlotCollector
--
-event_data_control_: EventDataControl&amp;
--
+SlotCollector(EventDataControl&amp;, const std::size_t max_slots)
+GetNumNewSamplesAvailable(): size_t
+GetNewSamplesSlotIndices(size_t max_count): 
 pair&lt;SlotIndexVector::const_reverse_iterator, SlotIndexVector::const_reverse_iterator&gt;
--
Notes:
SlotCollector is not copyable.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>560</y>
      <w>210</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;
bg=black
fg=dark_gray</panel_attributes>
    <additional_attributes>10.0;10.0;400.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1765</x>
      <y>580</y>
      <w>50</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;creates&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;280.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>600</y>
      <w>290</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;
bg=black
fg=dark_gray</panel_attributes>
    <additional_attributes>10.0;10.0;560.0;10.0;560.0;240.0</additional_attributes>
  </element>
</diagram>
